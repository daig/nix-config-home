snippet case
	case ${1} of
	  ${2:_} -> ${3:undefined}

snippet new
	newtype ${1:name} = $1 { un$1 :: ${2} }
	  deriving ($4)

snippet mod
	module ${1:Foo} where
	$2
snippet exp
	module ${1} (
	  ${2},
	) where

snippet if
	if ${1}
	then ${2}
	else ${3}

snippet im
	import ${1:Data}.${2:Text}
snippet ix
	import ${1:Data.Text} as X
snippet ih
	import ${1:Prelude} hiding ($2)
snippet iq
	import qualified ${1:Prelude} as ${2:P}
snippet iqt
	import qualified ${1:Data}.${2:Map} as $2
	import $1.$2 ($2)
snippet cl
	class ${1:Name} where
	  ${2:name} :: ${3}

snippet in
	instance ${1:Class} ${2:Type} where
	  ${3}

snippet rec
	data ${1} = ${2}
		{ ${3} :: ${4:T}
		} deriving (${6:classes})

snippet ff
	foreign import ccall safe "${1:cfunction}" ${2:name}
	    :: ${3:function}


snippet case

	case ${1} of
	     ${2} -> ${3}


snippet \
	(\ ${1} -> ${2:undefined})

snippet bar
	-------------------------------------------------------------------------------
	-- ${1}
	-------------------------------------------------------------------------------

snippet main
	main = return ()

snippet opt
	{-# OPTIONS_GHC ${1} #-}

snippet wall
	{-# OPTIONS_GHC -Wall #-}

snippet nowarn
	{-# OPTIONS_GHC -fno-warn-name-shadowing  #-}
	{-# OPTIONS_GHC -fno-warn-type-defaults   #-}
	{-# OPTIONS_GHC -fno-warn-unused-do-bind  #-}

snippet box
	--------------------------------------------------------------------
	-- |
	-- Module      :   
	-- Description :
	-- Copyright   :  (c) <Dai> 2018
	-- License     :  MIT
	-- Maintainer  :  <daig@sodality.cc>
	-- Stability   :  cursed
	-- Portability  : x86-64
	--
	--------------------------------------------------------------------

snippet dd
	deriving (Eq, Ord, Show, Typeable, Data, Generic)

snippet inl
	{-# inline ${1} #-}

snippet up
	{-# unpack #-}

snippet lang 
	{-# language ${1} #-}

snippet ffi
	{-# language ForeignFunctionInterface, CApiFFI, UnliftedFFITypes, GHCForeignImportPrim #-}
snippet prim
	{-# language MagicHash, UnboxedTuples, UnboxedSums #-}
snippet min
	{-# minimal ${1:foo} #-}
